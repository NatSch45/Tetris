@page "/game"
@inherits Tetris.Code.Game

<PageTitle>Game</PageTitle>

<h1>TETRIZ</h1>

<div class="game @isRunning">
    <div class="playerInterface">
        <div class="btn-group mr-2" role="group" aria-label="First group">
            <button type="button" class="btn btn-outline-primary" @onclick="setTetrimino">
                <span class="oi oi-media-play" aria-hidden="true"></span>
            </button>
        </div>
        
        <div class="btn-group mr-2" role="group" aria-label="Second group">
            <button type="button" class="btn btn-outline-primary fixBootstrap" @onclick="() => {moveTetrimino(false);}">
                <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
            </button>
            <button type="button" class="btn btn-outline-primary fixBootstrap" @onclick="dropTetrimino">
                <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
            </button>
            <button type="button" class="btn btn-outline-primary" @onclick="() => {moveTetrimino(true);}">
                <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
            </button>
        </div>
        
        <div class="btn-group mr-2" role="group" aria-label="Third group">
            <button type="button" class="btn btn-outline-primary" @onclick="rotateTetrimino">
                <span class="oi oi-reload" aria-hidden="true"></span>
            </button>
        </div>
    </div>
    <div class="mainContainer">
        <div class="card-deck m-3 grid">
            @foreach (var cell in gridObject.grid) {
                <div class="card cell @cell.name">@*(@cell.posX, @cell.posY)*@</div>
            }
        </div>
    </div>
</div>

<div class="gameOver" hidden="@isRunning">
    <h1>GAME OVER</h1>
</div>


@code {
    protected override void OnInitialized()
    {
        gridObject.grid = this.getGrid();
    }

    protected override Task OnInitializedAsync()
    {
        Timer();
        return base.OnInitializedAsync();
    }

    async Task Timer() {
        while(isRunning)
        {
            while(!isEndOfCourse)
            {
                await Task.Delay(timerDelay);
                dropTetrimino();
                StateHasChanged();
            }
            isEndOfCourse = false;
            await afterTimer();
            StateHasChanged();
        }
    }

    Task afterTimer() {
        setTetrimino();
        return Task.CompletedTask;
    }
}
